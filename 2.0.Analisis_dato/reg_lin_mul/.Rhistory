data_metro <- read.csv("data_metro.csv")
data_metro <- read.csv("data_metro.csv", sep = ";")
data_metro <- read.csv("data_metro.csv",header = TRUE, sep = ";")
data_metro <- read.csv("data_metro.csv",header = TRUE, sep = ";")
str(data_metro)
names(data_metro)
head(data_metro)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
data_metro <- read.csv("data_metro.csv")
library(dplyr)
data_metro <- read.csv("data_metro.csv",header = TRUE, sep = ";")
data_metro <- read.csv("data_metro.csv",header = TRUE, sep = ";")
library(dplyr)
data_metro <- read.csv("data_metro.csv",header = TRUE, sep = ";")
str(data_metro)
names(data_metro)
head(data_metro)
metro_data = data_metro[,c("demanda","Num_linea","Cercanias""Bus_inter","Renfe_LR"          ,"Oficina_TPP"       ,"Eventodromo_500"   ,"Aparcadisu_gratis"
metro_data = data_metro[c("demanda","Num_linea","Cercanias""Bus_inter","Renfe_LR"          ,"Oficina_TPP"       ,"Eventodromo_500"   ,"Aparcadisu_gratis"
metro_data = data_metro[c("demanda","Num_linea","Cercanias","Bus_inter","Renfe_LR"          ,"Oficina_TPP"       ,"Eventodromo_500"   ,"Aparcadisu_gratis"
,"Aparcadisu_pago"   ,"hog_tot"           ,"pob_tot"           ,"edad_media"        ,"person_hogar"
,"renper_pon"        ,"renhog_pon"        ,"dens_pond"         ,"por15_pon"         ,"por65_pon"
,"por1664pon"        ,"poresp_pon"        ,"porext_pon"        ,"poractivid"        ,"poract_pon"
,"X.1mujsol_p"       ,"X.1hactsolp"       ,"X.1mujmay_p"       ,"X.1hommay_p"       ,"X.1mujmad_p"
,"X.1hompad_p"       ,"X.2adusol_p"       ,"X.2adusma_p"       ,"X.2adumen_p"       ,"X.2adu2mn_p"
,"X.2adu3mn_p"       ,"X.2adu1jv_p"       ,"X.2a1jv1m_p"       ,"X.2a1jv2m_p"       ,"X.3adul_pon"
,"X.2ad2jv_p"        ,"X.2a2j1m_p"        ,"X.2a2j2m_p"        ,"X.4adulto_p"       ,"X.5adulto_p"
,"X.15perso_p"       ,"X.menas_p")]
View(metro_data)
pairs(metro_data, lower.panel = NULL)
cor(metro_data)
cor(metro_data)
str(data_metro)
metro_data$person_hogar <- as.numeric(metro_data$person_hogar)
metro_data = data_metro[c("demanda","Num_linea","Cercanias","Bus_inter","Renfe_LR"          ,"Oficina_TPP"       ,"Eventodromo_500"   ,"Aparcadisu_gratis"
,"Aparcadisu_pago"   ,"hog_tot"           ,"pob_tot"           ,"edad_media"        ,"person_hogar"
,"renper_pon"        ,"renhog_pon"        ,"dens_pond"         ,"por15_pon"         ,"por65_pon"
,"por1664pon"        ,"poresp_pon"        ,"porext_pon"        ,"poractivid"        ,"poract_pon"
,"X.1mujsol_p"       ,"X.1hactsolp"       ,"X.1mujmay_p"       ,"X.1hommay_p"       ,"X.1mujmad_p"
,"X.1hompad_p"       ,"X.2adusol_p"       ,"X.2adusma_p"       ,"X.2adumen_p"       ,"X.2adu2mn_p"
,"X.2adu3mn_p"       ,"X.2adu1jv_p"       ,"X.2a1jv1m_p"       ,"X.2a1jv2m_p"       ,"X.3adul_pon"
,"X.2ad2jv_p"        ,"X.2a2j1m_p"        ,"X.2a2j2m_p"        ,"X.4adulto_p"       ,"X.5adulto_p"
,"X.15perso_p"       ,"X.menas_p")]
metro_data$person_hogar <- as.numeric(gsub(",",".",metro_data$person_hogar))
data_metro <- read.csv("data_metro.csv",header = TRUE, sep = ";")
metro_data = data_metro[c("demanda","Num_linea","Cercanias","Bus_inter","Renfe_LR"          ,"Oficina_TPP"       ,"Eventodromo_500"   ,"Aparcadisu_gratis"
,"Aparcadisu_pago"   ,"hog_tot"           ,"pob_tot"           ,"edad_media"        ,"person_hogar"
,"renper_pon"        ,"renhog_pon"        ,"dens_pond"         ,"por15_pon"         ,"por65_pon"
,"por1664pon"        ,"poresp_pon"        ,"porext_pon"        ,"poractivid"        ,"poract_pon"
,"1mujsol_p"       ,"1hactsolp"       ,"1mujmay_p"       ,"1hommay_p"       ,"1mujmad_p"
,"1hompad_p"       ,"2adusol_p"       ,"2adusma_p"       ,"2adumen_p"       ,"2adu2mn_p"
,"2adu3mn_p"       ,"2adu1jv_p"       ,"2a1jv1m_p"       ,"2a1jv2m_p"       ,"3adul_pon"
,"2ad2jv_p"        ,"2a2j1m_p"        ,"2a2j2m_p"        ,"4adulto_p"       ,"5adulto_p"
,"15perso_p"       ,"menas_p")]
data_metro <- read.csv("data_metro.csv",header = TRUE, sep = ";")
names(data_metro)
metro_data = data_metro[c("demanda","Num_linea","Cercanias","Bus_inter","Renfe_LR"          ,"Oficina_TPP"       ,"Eventodromo_500"   ,"Aparcadisu_gratis"
,"Aparcadisu_pago"   ,"hog_tot"           ,"pob_tot"           ,"edad_media"        ,"person_hogar"
,"renper_pon"        ,"renhog_pon"        ,"dens_pond"         ,"por15_pon"         ,"por65_pon"
,"por1664pon"        ,"poresp_pon"        ,"porext_pon"        ,"poractivid"        ,"poract_pon"
,"x1mujsol_p"       ,"x1hactsolp"       ,"x1mujmay_p"       ,"x1hommay_p"       ,"x1mujmad_p"
,"x1hompad_p"       ,"x2adusol_p"       ,"x2adusma_p"       ,"x2adumen_p"       ,"x2adu2mn_p"
,"x2adu3mn_p"       ,"x2adu1jv_p"       ,"x2a1jv1m_p"       ,"x2a1jv2m_p"       ,"x3adul_pon"
,"x2ad2jv_p"        ,"x2a2j1m_p"        ,"x2a2j2m_p"        ,"x4adulto_p"       ,"x5adulto_p"
,"x15perso_p"       ,"xmenas_p")]
metro_data = data_metro[c("demanda","Num_linea","Cercanias","Bus_inter","Renfe_LR"          ,"Oficina_TPP"       ,"Eventodromo_500"   ,"Aparcadisu_gratis"
,"Aparcadisu_pago"   ,"hog_tot"           ,"pob_tot"           ,"edad_media"        ,"person_hogar"
,"renper_pon"        ,"renhog_pon"        ,"dens_pond"         ,"por15_pon"         ,"por65_pon"
,"por1664pon"        ,"poresp_pon"        ,"porext_pon"        ,"poractivid"        ,"poract_pon"
,"x1mujsol_p"       ,"x1hactsolp"       ,"x1mujmay_p"       ,"x1hommay_p"       ,"x1mujmad_p"
,"x1hompad_p"       ,"x2adusol_p"       ,"x2adusma_p"       ,"x2adumen_p"       ,"x2adu2mn_p"
,"x2adu3mn_p"       ,"x2adu1jv_p"       ,"x2a1jv1m_p"       ,"x2a1jv2m_p"       ,"x3adul_pon"
,"x2ad2jv_p"        ,"x2a2j1m_p"        ,"x2a2j2m_p"        ,"x4adulto_p"       ,"x5adulto_p"
,"x15perso_p"       ,"menas_p")]
data_metro <- read.csv("data_metro.csv",header = TRUE, sep = ";")
str(data_metro)
names(data_metro)
head(data_metro)
metro_data = data_metro[c("demanda","Num_linea","Cercanias","Bus_inter","Renfe_LR"          ,"Oficina_TPP"       ,"Eventodromo_500"   ,"Aparcadisu_gratis"
,"Aparcadisu_pago"   ,"hog_tot"           ,"pob_tot"           ,"edad_media"        ,"person_hogar"
,"renper_pon"        ,"renhog_pon"        ,"dens_pond"         ,"por15_pon"         ,"por65_pon"
,"por1664pon"        ,"poresp_pon"        ,"porext_pon"        ,"poractivid"        ,"poract_pon"
,"x1mujsol_p"       ,"x1hactsolp"       ,"x1mujmay_p"       ,"x1hommay_p"       ,"x1mujmad_p"
,"x1hompad_p"       ,"x2adusol_p"       ,"x2adusma_p"       ,"x2adumen_p"       ,"x2adu2mn_p"
,"x2adu3mn_p"       ,"x2adu1jv_p"       ,"x2a1jv1m_p"       ,"x2a1jv2m_p"       ,"x3adul_pon"
,"x2ad2jv_p"        ,"x2a2j1m_p"        ,"x2a2j2m_p"        ,"x4adulto_p"       ,"x5adulto_p"
,"x15perso_p"       ,"menas_p")]
metro_data = data_metro[c("demanda", "Num_linea", "Cercanias", "Bus_inter", "Renfe_LR", "Oficina_TPP", "Eventodromo_500",
"Aparcadisu_gratis", "Aparcadisu_pago", "hog_tot", "pob_tot", "edad_media", "person_hogar",
"renper_pon", "renhog_pon", "dens_pond", "por15_pon", "por65_pon", "por1664pon", "poresp_pon",
"porext_pon", "poractivid", "poract_pon", "X1mujsol_p", "X1hactsolp", "X1mujmay_p", "X1hommay_p",
"X1mujmad_p", "X1hompad_p", "X2adusol_p", "X2adusma_p", "X2adumen_p", "X2adu2mn_p", "X2adu3mn_p", "X2adu1jv_p",
"X2a1jv1m_p", "X2a1jv2m_p", "X3adul_pon", "X2ad2jv_p", "X2a2j1m_p", "X2a2j2m_p", "X4adulto_p", "X5adulto_p",
"X15perso_p", "menas_p")]
cor(metro_data)
cor(metro_data)
matriz_corr <- cor(metro_data)
View(matriz_corr)
pairs(wdata, lower.panel = NULL)
pairs(metro_data, lower.panel = NULL)
cor.test(metro_data$demanda, metro_data$Num_linea)
View(matriz_corr)
library(caret)
install.packages("lava")
library(lava)
library(caret)
install.packages("timechange")
library(caret)
install.packages("ModelMetrics")
library(caret)
set.seed(123)
particion <- createDataPartition(metro_data$demanda, p = 0.8, list = false)
set.seed(123)
particion <- createDataPartition(metro_data$demanda, p = 0.8, list = FALSE)
train <- metro_data[particion,]
test <- metro_data[-particion,]
matriz_corr <- cor(metro_data)
altamente_correladas <- findCorrelation(matriz_corr, cutoff = 0.9)
View(matriz_corr)
data_reducida <- metro_data[,-altamente_correladas]
pairs(data_reducida, lower.panel = NULL)
matriz_corr["demanda"]
matriz_corr["demanda"]
matriz_corr[1]
matriz_corr[1,]
matriz_corr["demanda",]
variables <- setdiff(names(data_reducida),"demanda")
# Crear lista para almacenar resultados
resultados <- lapply(variables, function(var) {
test <- cor.test(data_reducida[[var]], data_reducida$demanda, method = "pearson")
data.frame(
variable = var,
r = round(test$estimate, 3),
p_value = round(test$p.value, 5)
)
})
# Unir todos los resultados en un data.frame
tabla_resultados <- do.call(rbind, resultados)
# Ordenar por p-value
tabla_resultados <- tabla_resultados[order(tabla_resultados$p_value), ]
# Ver los primeros resultados
head(tabla_resultados)
View(tabla_resultados)
# Filtrar por significancia (p ≤ 0.05) y fuerza (|r| ≥ 0.2)
variables_significativas <- tabla_resultados %>%
dplyr::filter(p_value <= 0.05, abs(r) >= 0.2) %>%
dplyr::pull(variable)
library(dplyr)
library(tidyverse)
# Filtrar por significancia (p ≤ 0.05) y fuerza (|r| ≥ 0.2)
variables_significativas <- tabla_resultados %>%
dplyr::filter(p_value <= 0.05, abs(r) >= 0.2) %>%
dplyr::pull(variable)
# Crear nuevo dataset con esas variables + target
datos_filtrados <- datos[, c(variables_significativas, "target")]
# Filtrar por significancia (p ≤ 0.05) y fuerza (|r| ≥ 0.2)
variables_significativas <- tabla_resultados %>%
dplyr::filter(p_value <= 0.05, abs(r) >= 0.2) %>%
dplyr::pull(variable)
# Crear nuevo dataset con esas variables + target
datos_filtrados <- data_reducida[, c(variables_significativas, "demanda")]
# Verificar
str(datos_filtrados)
View(datos_filtrados)
install.packages("e1071")
install.packages("e1071")
require(e1071)
par(mfrow=c(1, 2))
plot(density(datos_filtrados$Num_linea), main="Density Plot: Wage", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(datos_filtrados$Num_linea), 2)))
polygon(density(datos_filtrados$Num_linea), col="red")
require(nortest)
lillie.test(datos_filtrados$Num_linea)
# Representación gráfica para ver si siguen una distribución normal
par(mfrow=c(1, 2))
plot(density(datos_filtrados$demanda), main='Nombre de la variable')
plot(density(datos_filtrados$Num_linea), main='Nombre de la variable')
# Representación gráfica para ver si siguen una distribución normal
par(mfrow=c(1, 2))
plot(density(datos_filtrados$demanda), main='Demanda')
plot(density(datos_filtrados$Num_linea), main='Número de líneas')
set.seed(123)
particion <- createDataPartition(datos_filtrados$Num_linea, p = 0.8, list = FALSE)
library(dplyr)
library(caret)
library(tidyverse)
set.seed(123)
particion <- createDataPartition(datos_filtrados$Num_linea, p = 0.8, list = FALSE)
train <- datos_filtrados[particion,]
test <- datos_filtrados[-particion,]
View(test)
modelo1 = demanda ~ setdiff(names(datos_filtrados),"demanda")
ols = lm(modelo, data = datos_filtrados)
ols = lm(modelo1, data = datos_filtrados)
modelo1 = demanda ~ Num_linea + Cercanias + Bus_inter + Renfe_LR + Oficina_TPP
ols = lm(modelo1, data = datos_filtrados)
ols
summary(ols)
View(tabla_resultados)
modelo2 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + Renfe_LR + X1hactsolp + X2adu1jv_p + X2a1jv1m_p + X2a2j1m_p
ols2 = lm(modelo2, data = datos_filtrados)
summary(ols2)
modelo3 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + X1hactsolp + X2a2j1m_p
ols3 = lm(modelo3, data = datos_filtrados)
summary(ols3)
modelo3 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + X2a2j1m_p
ols3 = lm(modelo3, data = datos_filtrados)
summary(ols3)
modelo3 = demanda ~ Num_linea + Bus_inter + Cercanias + Oficina_TPP + X2a2j1m_p
ols3 = lm(modelo3, data = datos_filtrados)
summary(ols3)
View(tabla_resultados)
View(test)
particion <- createDataPartition(datos_filtrados$demanda, p = 0.8, list = FALSE)
train <- datos_filtrados[particion,]
test <- datos_filtrados[-particion,]
modelo3 = demanda ~ Num_linea + Bus_inter + Cercanias + Oficina_TPP + X2a2j1m_p
ols3 = lm(modelo3, data = train)
summary(ols3)
View(train)
modelo3 = demanda ~ Num_linea + Bus_inter + Cercanias + Oficina_TPP + X2a2j1m_p
ols3 = lm(modelo3, data = train)
summary(ols3)
variables_significativas
modelo4 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + Renfe_LR + X1hactsolp + X2adu1jv_p + X2a1jv1m_p + X2a2j1m_p + X2adu2mn_p + X2adumen_p
+ person_hogar + X1mujmad_p + X2ad2jv_p + X2adusol_p + X1hommay_p + Aparcadisu_pago + por15_pon + X3adul_pon
modelo4 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + Renfe_LR + X1hactsolp + X2adu1jv_p + X2a1jv1m_p + X2a2j1m_p + X2adu2mn_p + X2adumen_p + person_hogar + X1mujmad_p + X2ad2jv_p + X2adusol_p + X1hommay_p + Aparcadisu_pago + por15_pon + X3adul_pon
ols4 = lm(modelo4, data = train)
summary(ols4)
modelo5 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + X2a2j1m_p + person_hogar + X1hommay_p
ols5 = lm(modelo5, data = train)
summary(ols5)
data_metro <- read.csv("data_metro.csv",header = TRUE, sep = ";")
str(data_metro)
names(data_metro)
head(data_metro)
metro_data = data_metro[c("demanda", "Num_linea", "Cercanias", "Bus_inter", "Renfe_LR", "Oficina_TPP", "Eventodromo_500",
"Aparcadisu_gratis", "Aparcadisu_pago", "hog_tot", "pob_tot", "edad_media", "person_hogar",
"renper_pon", "renhog_pon", "dens_pond", "por15_pon", "por65_pon", "por1664pon", "poresp_pon",
"porext_pon", "poractivid", "poract_pon", "X1mujsol_p", "X1hactsolp", "X1mujmay_p", "X1hommay_p",
"X1mujmad_p", "X1hompad_p", "X2adusol_p", "X2adusma_p", "X2adumen_p", "X2adu2mn_p", "X2adu3mn_p", "X2adu1jv_p",
"X2a1jv1m_p", "X2a1jv2m_p", "X3adul_pon", "X2ad2jv_p", "X2a2j1m_p", "X2a2j2m_p", "X4adulto_p", "X5adulto_p",
"X15perso_p", "menas_p")]
matriz_corr <- cor(metro_data)
matriz_corr["demanda",]
altamente_correladas <- findCorrelation(matriz_corr, cutoff = 0.9)
library(caret)
matriz_corr <- cor(metro_data)
matriz_corr["demanda",]
altamente_correladas <- findCorrelation(matriz_corr, cutoff = 0.9)
data_reducida <- metro_data[,-altamente_correladas]
variables <- setdiff(names(data_reducida),"demanda")
resultados <- lapply(variables, function(var) {
test <- cor.test(data_reducida[[var]], data_reducida$demanda, method = "pearson")
data.frame(
variable = var,
r = round(test$estimate, 3),
p_value = round(test$p.value, 5)
)
})
# Unir todos los resultados en un data.frame
tabla_resultados <- do.call(rbind, resultados)
# Ordenar por p-value
tabla_resultados <- tabla_resultados[order(tabla_resultados$p_value), ]
# Ver los primeros resultados
head(tabla_resultados)
# Filtrar por significancia (p ≤ 0.05) y fuerza (|r| ≥ 0.2)
variables_significativas <- tabla_resultados %>%
dplyr::filter(p_value <= 0.05, abs(r) >= 0.2) %>%
dplyr::pull(variable)
library(dplyr)
# Filtrar por significancia (p ≤ 0.05) y fuerza (|r| ≥ 0.2)
variables_significativas <- tabla_resultados %>%
dplyr::filter(p_value <= 0.05, abs(r) >= 0.2) %>%
dplyr::pull(variable)
# Crear nuevo dataset con esas variables + target
datos_filtrados <- data_reducida[, c(variables_significativas, "demanda")]
# Verificar
str(datos_filtrados)
require(e1071)
par(mfrow=c(1, 2))
plot(density(datos_filtrados$Num_linea), main="Density Plot: Wage", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(datos_filtrados$Num_linea), 2)))
polygon(density(datos_filtrados$Num_linea), col="red")
require(nortest)
lillie.test(datos_filtrados$Num_linea)
# Representación gráfica para ver si siguen una distribución normal
par(mfrow=c(1, 2))
plot(density(datos_filtrados$demanda), main='Demanda')
plot(density(datos_filtrados$Num_linea), main='Número de líneas')
set.seed(123)
particion <- createDataPartition(datos_filtrados$demanda, p = 0.8, list = FALSE)
train <- datos_filtrados[particion,]
test <- datos_filtrados[-particion,]
modelo1 = demanda ~ Num_linea + Cercanias + Bus_inter + Renfe_LR + Oficina_TPP
modelo2 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + Renfe_LR + X1hactsolp + X2adu1jv_p + X2a1jv1m_p + X2a2j1m_p
modelo3 = demanda ~ Num_linea + Bus_inter + Cercanias + Oficina_TPP + X2a2j1m_p
modelo4 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + Renfe_LR + X1hactsolp + X2adu1jv_p + X2a1jv1m_p + X2a2j1m_p + X2adu2mn_p + X2adumen_p + person_hogar + X1mujmad_p + X2ad2jv_p + X2adusol_p + X1hommay_p + Aparcadisu_pago + por15_pon + X3adul_pon
modelo5 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + X2a2j1m_p + person_hogar + X1hommay_p
ols = lm(modelo1, data = datos_filtrados)
ols2 = lm(modelo2, data = datos_filtrados)
ols3 = lm(modelo3, data = train)
ols4 = lm(modelo4, data = train)
ols5 = lm(modelo5, data = train)
summary(ols5)
data_metro <- read.csv("data_metro.csv",header = TRUE, sep = ";")
data_metro <- read.csv("data_metro.csv",header = TRUE, sep = ";")
str(data_metro)
str(data_metro)
class(data_metro)
dim(data_metro)
names(data_metro)
# Eliminamos variables no numéricas ----
data_metro <- data_metro[, -c(1, 2)]
View(data_metro)
# Mostramos características principales de nuestro dataframe ----
head(data_metro)
summary(data_metro)
pairs(data_metro, lower.panel = NULL)
matriz_corr <- cor(metro_data)
matriz_corr <- cor(data_metro)
matriz_corr["demanda",]
View(matriz_corr)
altamente_correladas <- findCorrelation(matriz_corr, cutoff = 0.9)
data_reducida <- metro_data[,-altamente_correladas]
altamente_correladas <- findCorrelation(matriz_corr, cutoff = 0.9)
data_reducida <- data_metro[,-altamente_correladas]
variables <- setdiff(names(data_reducida),"demanda")
altamente_correladas <- findCorrelation(matriz_corr, cutoff = 0.9)
data_reducida <- data_metro[,-altamente_correladas]
variables <- setdiff(names(data_reducida),"demanda")
# Crear lista para almacenar resultados
resultados <- lapply(variables, function(var) {
test <- cor.test(data_reducida[[var]], data_reducida$demanda, method = "pearson")
data.frame(
variable = var,
r = round(test$estimate, 3),
p_value = round(test$p.value, 5)
)
})
# Unir todos los resultados en un data.frame
tabla_resultados <- do.call(rbind, resultados)
# Ordenar por p-value
tabla_resultados <- tabla_resultados[order(tabla_resultados$p_value), ]
# Ver los primeros resultados
head(tabla_resultados)
# descarto variables ------------------------------------------------------
# Filtrar por significancia (p ≤ 0.05) y fuerza (|r| ≥ 0.2)
variables_significativas <- tabla_resultados %>%
dplyr::filter(p_value <= 0.05, abs(r) >= 0.2) %>%
dplyr::pull(variable)
# Crear nuevo dataset con esas variables + target
datos_filtrados <- data_reducida[, c(variables_significativas, "demanda")]
# Verificar
str(datos_filtrados)
set.seed(123)
particion <- createDataPartition(datos_filtrados$demanda, p = 0.8, list = FALSE)
train <- datos_filtrados[particion,]
test <- datos_filtrados[-particion,]
modelo1 = demanda ~ Num_linea + Cercanias + Bus_inter + Renfe_LR + Oficina_TPP
modelo2 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + Renfe_LR + X1hactsolp + X2adu1jv_p + X2a1jv1m_p + X2a2j1m_p
modelo3 = demanda ~ Num_linea + Bus_inter + Cercanias + Oficina_TPP + X2a2j1m_p
modelo4 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + Renfe_LR + X1hactsolp + X2adu1jv_p + X2a1jv1m_p + X2a2j1m_p + X2adu2mn_p + X2adumen_p + person_hogar + X1mujmad_p + X2ad2jv_p + X2adusol_p + X1hommay_p + Aparcadisu_pago + por15_pon + X3adul_pon
modelo5 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + X2a2j1m_p + person_hogar + X1hommay_p
ols = lm(modelo1, data = datos_filtrados)
ols2 = lm(modelo2, data = datos_filtrados)
ols3 = lm(modelo3, data = train)
ols4 = lm(modelo4, data = train)
ols5 = lm(modelo5, data = train)
summary(ols)
summary(ols2)
summary(ols3)
summary(ols4)
summary(ols5)
ols = lm(modelo1, data = train)
ols2 = lm(modelo2, data = train)
ols3 = lm(modelo3, data = train)
ols4 = lm(modelo4, data = train)
ols5 = lm(modelo5, data = train)
summary(ols)
summary(ols2)
summary(ols3)
summary(ols4)
summary(ols5)
modelo6 <- lm(target ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + X2a2j1m_p, data = train)
modelo6 <- lm(demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + X2a2j1m_p, data = train)
summary(modelo6)
predicciones <- predict(modelo6, newdata = test)
# Paso 2: Calcular errores (residuos)
errores <- test$demanda - predicciones
# Paso 3: Cálculo de métricas
MAE <- mean(abs(errores))
RMSE <- sqrt(mean(errores^2))
cat("MAE:", round(MAE, 0), "\n")
cat("RMSE:", round(RMSE, 0), "\n")
View(data_metro)
# Paso 4: R² fuera de muestra
SSE <- sum(errores^2)  # Suma de errores al cuadrado
SST <- sum((test$demanda - mean(train$demanda))^2)  # Total
R2_test <- 1 - (SSE / SST)
cat("R² en test:", round(R2_test, 3), "\n")
