install.packages("lava")
install.packages("timechange")
install.packages("ModelMetrics")
install.packages("e1071")
library(dplyr)
library(caret)
library(tidyverse)



data_metro <- read.csv("data_metro.csv",header = TRUE, sep = ";")
str(data_metro)
names(data_metro)
head(data_metro)
metro_data = data_metro[c("demanda", "Num_linea", "Cercanias", "Bus_inter", "Renfe_LR", "Oficina_TPP", "Eventodromo_500",
                          "Aparcadisu_gratis", "Aparcadisu_pago", "hog_tot", "pob_tot", "edad_media", "person_hogar", 
                          "renper_pon", "renhog_pon", "dens_pond", "por15_pon", "por65_pon", "por1664pon", "poresp_pon",
                          "porext_pon", "poractivid", "poract_pon", "X1mujsol_p", "X1hactsolp", "X1mujmay_p", "X1hommay_p",
                          "X1mujmad_p", "X1hompad_p", "X2adusol_p", "X2adusma_p", "X2adumen_p", "X2adu2mn_p", "X2adu3mn_p", "X2adu1jv_p", 
                          "X2a1jv1m_p", "X2a1jv2m_p", "X3adul_pon", "X2ad2jv_p", "X2a2j1m_p", "X2a2j2m_p", "X4adulto_p", "X5adulto_p", 
                          "X15perso_p", "menas_p")]




# análisis correlaciones --------------------------------------------------
matriz_corr <- cor(metro_data)
matriz_corr["demanda",]

altamente_correladas <- findCorrelation(matriz_corr, cutoff = 0.9)
data_reducida <- metro_data[,-altamente_correladas]

variables <- setdiff(names(data_reducida),"demanda")


# Crear lista para almacenar resultados
resultados <- lapply(variables, function(var) {
  test <- cor.test(data_reducida[[var]], data_reducida$demanda, method = "pearson")
  data.frame(
    variable = var,
    r = round(test$estimate, 3),
    p_value = round(test$p.value, 5)
  )
})

# Unir todos los resultados en un data.frame
tabla_resultados <- do.call(rbind, resultados)

# Ordenar por p-value
tabla_resultados <- tabla_resultados[order(tabla_resultados$p_value), ]

# Ver los primeros resultados
head(tabla_resultados)


cor.test(metro_data$demanda, metro_data$Num_linea)
cor.test(metro_data$demanda, metro_data$Oficina_TPP)
cor.test(metro_data$demanda, metro_data$Bus_inter)
cor.test(metro_data$demanda, metro_data$Num_linea)
cor.test(metro_data$demanda, metro_data$Num_linea)
cor.test(metro_data$demanda, metro_data$Num_linea)

# descarto variables ------------------------------------------------------

# Filtrar por significancia (p ≤ 0.05) y fuerza (|r| ≥ 0.2)
variables_significativas <- tabla_resultados %>%
  dplyr::filter(p_value <= 0.05, abs(r) >= 0.2) %>%
  dplyr::pull(variable)

# Crear nuevo dataset con esas variables + target
datos_filtrados <- data_reducida[, c(variables_significativas, "demanda")]

# Verificar
str(datos_filtrados)

# grafico -----------------------------------------------------------------

require(e1071)  
par(mfrow=c(1, 2))  
plot(density(datos_filtrados$Num_linea), main="Density Plot: Wage", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(datos_filtrados$Num_linea), 2)))  
polygon(density(datos_filtrados$Num_linea), col="red")

require(nortest)
lillie.test(datos_filtrados$Num_linea)

# Representación gráfica para ver si siguen una distribución normal
par(mfrow=c(1, 2))
plot(density(datos_filtrados$demanda), main='Demanda')
plot(density(datos_filtrados$Num_linea), main='Número de líneas')

# particion ---------------------------------------------------------------

set.seed(123)
particion <- createDataPartition(datos_filtrados$demanda, p = 0.8, list = FALSE)
train <- datos_filtrados[particion,]
test <- datos_filtrados[-particion,]


# entreno modelos ----------------------------------------------------------

modelo1 = demanda ~ Num_linea + Cercanias + Bus_inter + Renfe_LR + Oficina_TPP
modelo2 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + Renfe_LR + X1hactsolp + X2adu1jv_p + X2a1jv1m_p + X2a2j1m_p 
modelo3 = demanda ~ Num_linea + Bus_inter + Cercanias + Oficina_TPP + X2a2j1m_p
modelo4 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + Renfe_LR + X1hactsolp + X2adu1jv_p + X2a1jv1m_p + X2a2j1m_p + X2adu2mn_p + X2adumen_p + person_hogar + X1mujmad_p + X2ad2jv_p + X2adusol_p + X1hommay_p + Aparcadisu_pago + por15_pon + X3adul_pon
modelo5 = demanda ~ Num_linea + Cercanias + Bus_inter + Oficina_TPP + X2a2j1m_p + person_hogar + X1hommay_p

ols = lm(modelo1, data = datos_filtrados)
ols2 = lm(modelo2, data = datos_filtrados)
ols3 = lm(modelo3, data = train)
ols4 = lm(modelo4, data = train)
ols5 = lm(modelo5, data = train)
summary(ols5)

variables_significativas
